using System;
using System.Collections.Generic;

// Item class represents an individual item in the inventory
public class Item
{
    // Properties for the Item class
    public int ID { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
    public int Quantity { get; set; }

    // Constructor to initialize an item
    public Item(int id, string name, decimal price, int quantity)
    {
        ID = id;
        Name = name;
        Price = price;
        Quantity = quantity;
    }

    // Override ToString() method to display item details
    public override string ToString()
    {
        return $"ID: {ID}, Name: {Name}, Price: {Price}, Quantity: {Quantity}";
    }
}

// Inventory class manages a collection of items
public class Inventory
{
    // List to store items
    private List<Item> items;

    // Constructor to initialize the item list
    public Inventory()
    {
        items = new List<Item>();
    }

    // Method to add a new item to the inventory
    public void AddItem(Item item)
    {
        items.Add(item);
        Console.WriteLine("Item added successfully.");
    }

    // Method to display all items in the inventory
    public void DisplayItems()
    {
        if (items.Count == 0)
        {
            Console.WriteLine("No items in inventory.");
            return;
        }

        foreach (var item in items)
        {
            Console.WriteLine(item);
        }
    }

    // Method to find an item by its ID
    public Item FindItemById(int id)
    {
        return items.Find(item => item.ID == id);
    }

    // Method to update an item's information
    public void UpdateItem(int id, string newName, decimal newPrice, int newQuantity)
    {
        Item item = FindItemById(id);
        if (item != null)
        {
            item.Name = newName;
            item.Price = newPrice;
            item.Quantity = newQuantity;
            Console.WriteLine("Item updated successfully.");
        }
        else
        {
            Console.WriteLine("Item not found.");
        }
    }

    // Method to delete an item from the inventory
    public void DeleteItem(int id)
    {
        Item item = FindItemById(id);
        if (item != null)
        {
            items.Remove(item);
            Console.WriteLine("Item deleted successfully.");
        }
        else
        {
            Console.WriteLine("Item not found.");
        }
    }
}

// Main class for the application
class Program
{
    static void Main(string[] args)
    {
        Inventory inventory = new Inventory();
        bool exit = false;

        while (!exit)
        {
            Console.WriteLine("Inventory Management System");
            Console.WriteLine("1. Add Item");
            Console.WriteLine("2. Display Items");
            Console.WriteLine("3. Find Item by ID");
            Console.WriteLine("4. Update Item");
            Console.WriteLine("5. Delete Item");
            Console.WriteLine("6. Exit");
            Console.Write("Choose an option: ");

            int choice;
            if (int.TryParse(Console.ReadLine(), out choice))
            {
                switch (choice)
                {
                    case 1:
                        AddNewItem(inventory);
                        break;
                    case 2:
                        inventory.DisplayItems();
                        break;
                    case 3:
                        FindAndDisplayItemById(inventory);
                        break;
                    case 4:
                        UpdateExistingItem(inventory);
                        break;
                    case 5:
                        DeleteExistingItem(inventory);
                        break;
                    case 6:
                        exit = true;
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a number.");
            }

            Console.WriteLine();
        }
    }

    // Method to add a new item
    static void AddNewItem(Inventory inventory)
    {
        try
        {
            Console.Write("Enter Item ID: ");
            int id = int.Parse(Console.ReadLine());

            Console.Write("Enter Item Name: ");
            string name = Console.ReadLine();

            Console.Write("Enter Item Price: ");
            decimal price = decimal.Parse(Console.ReadLine());

            Console.Write("Enter Item Quantity: ");
            int quantity = int.Parse(Console.ReadLine());

            Item newItem = new Item(id, name, price, quantity);
            inventory.AddItem(newItem);
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid input. Please enter the correct data types.");
        }
    }
    // code by pranjal malviya

    // Method to find and display an item by ID
    static void FindAndDisplayItemById(Inventory inventory)
    {
        try
        {
            Console.Write("Enter Item ID: ");
            int id = int.Parse(Console.ReadLine());

            Item item = inventory.FindItemById(id);
            if (item != null)
            {
                Console.WriteLine(item);
            }
            else
            {
                Console.WriteLine("Item not found.");
            }
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid input. Please enter a valid number.");
        }
    }

    // Method to update an existing item
    static void UpdateExistingItem(Inventory inventory)
    {
        try
        {
            Console.Write("Enter Item ID to update: ");
            int id = int.Parse(Console.ReadLine());

            Console.Write("Enter new Item Name: ");
            string newName = Console.ReadLine();

            Console.Write("Enter new Item Price: ");
            decimal newPrice = decimal.Parse(Console.ReadLine());

            Console.Write("Enter new Item Quantity: ");
            int newQuantity = int.Parse(Console.ReadLine());

            inventory.UpdateItem(id, newName, newPrice, newQuantity);
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid input. Please enter the correct data types.");
        }
    }

    // Method to delete an existing item
    static void DeleteExistingItem(Inventory inventory)
    {
        try
        {
            Console.Write("Enter Item ID to delete: ");
            int id = int.Parse(Console.ReadLine());

            inventory.DeleteItem(id);
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid input. Please enter a valid number.");
        }
    }
}
