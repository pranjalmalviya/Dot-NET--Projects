// Library Management System 

using System;
using System.Collections.Generic;
using System.Linq;

// DTO Classes
public class Book
{
    public string UId { get; set; }
    public string Title { get; set; }
    public string Author { get; set; }
    public DateTime PublishedDate { get; set; }
    public string ISBN { get; set; }
    public bool IsIssued { get; set; }
}

public class Member
{
    public string UId { get; set; }
    public string Name { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string Email { get; set; }
}

public class Issue
{
    public string UId { get; set; }
    public string BookId { get; set; }
    public string MemberId { get; set; }
    public DateTime IssueDate { get; set; }
    public DateTime? ReturnDate { get; set; }
    public bool IsReturned { get; set; }
}

// Service Classes
public class BookService
{
    private List<Book> books = new List<Book>();

    public void AddBook(Book book) => books.Add(book);

    public Book GetBookById(string uid) => books.FirstOrDefault(b => b.UId == uid);

    public Book GetBookByName(string title) => books.FirstOrDefault(b => b.Title.Equals(title, StringComparison.OrdinalIgnoreCase));

    public List<Book> GetAllBooks() => books;

    public List<Book> GetAvailableBooks() => books.Where(b => !b.IsIssued).ToList();

    public List<Book> GetIssuedBooks() => books.Where(b => b.IsIssued).ToList();

    public void UpdateBook(Book updatedBook)
    {
        var book = GetBookById(updatedBook.UId);
        if (book != null)
        {
            book.Title = updatedBook.Title;
            book.Author = updatedBook.Author;
            book.PublishedDate = updatedBook.PublishedDate;
            book.ISBN = updatedBook.ISBN;
            book.IsIssued = updatedBook.IsIssued;
        }
    }
}
// PRANJAL CODE 
public class MemberService
{
    private List<Member> members = new List<Member>();

    public void AddMember(Member member) => members.Add(member);

    public Member GetMemberById(string uid) => members.FirstOrDefault(m => m.UId == uid);

    public List<Member> GetAllMembers() => members;

    public void UpdateMember(Member updatedMember)
    {
        var member = GetMemberById(updatedMember.UId);
        if (member != null)
        {
            member.Name = updatedMember.Name;
            member.DateOfBirth = updatedMember.DateOfBirth;
            member.Email = updatedMember.Email;
        }
    }
}

public class IssueService
{
    private List<Issue> issues = new List<Issue>();

    public void AddIssue(Issue issue) => issues.Add(issue);

    public Issue GetIssueById(string uid) => issues.FirstOrDefault(i => i.UId == uid);

    public void UpdateIssue(Issue updatedIssue)
    {
        var issue = GetIssueById(updatedIssue.UId);
        if (issue != null)
        {
            issue.BookId = updatedIssue.BookId;
            issue.MemberId = updatedIssue.MemberId;
            issue.IssueDate = updatedIssue.IssueDate;
            issue.ReturnDate = updatedIssue.ReturnDate;
            issue.IsReturned = updatedIssue.IsReturned;
        }
    }
}

// Console Application
class Program
{
    static BookService bookService = new BookService();
    static MemberService memberService = new MemberService();
    static IssueService issueService = new IssueService();

    static void Main(string[] args)
    {
        bool exit = false;
        while (!exit)
        {
            Console.WriteLine("Library Management System");
            Console.WriteLine("1. Add Book");
            Console.WriteLine("2. Retrieve Book by UId");
            Console.WriteLine("3. Retrieve Book by Name");
            Console.WriteLine("4. Retrieve All Books");
            Console.WriteLine("5. Retrieve Available Books");
            Console.WriteLine("6. Retrieve Issued Books");
            Console.WriteLine("7. Update Book");
            Console.WriteLine("8. Add Member");
            Console.WriteLine("9. Retrieve Member by UId");
            Console.WriteLine("10. Get All Members");
            Console.WriteLine("11. Update Member");
            Console.WriteLine("12. Issue Book");
            Console.WriteLine("13. Get Issue by UId");
            Console.WriteLine("14. Update Issue");
            Console.WriteLine("15. Exit");
            Console.Write("Choose an option: ");

            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    AddBook();
                    break;
                case 2:
                    RetrieveBookById();
                    break;
                case 3:
                    RetrieveBookByName();
                    break;
                case 4:
                    RetrieveAllBooks();
                    break;
                case 5:
                    RetrieveAvailableBooks();
                    break;
                case 6:
                    RetrieveIssuedBooks();
                    break;
                case 7:
                    UpdateBook();
                    break;
                case 8:
                    AddMember();
                    break;
                case 9:
                    RetrieveMemberById();
                    break;
                case 10:
                    GetAllMembers();
                    break;
                case 11:
                    UpdateMember();
                    break;
                case 12:
                    IssueBook();
                    break;
                case 13:
                    GetIssueById();
                    break;
                case 14:
                    UpdateIssue();
                    break;
                case 15:
                    exit = true;
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    static void AddBook()
    {
        Console.Write("Enter Book UId: ");
        string uid = Console.ReadLine();
        Console.Write("Enter Title: ");
        string title = Console.ReadLine();
        Console.Write("Enter Author: ");
        string author = Console.ReadLine();
        Console.Write("Enter Published Date (yyyy-mm-dd): ");
        DateTime publishedDate = DateTime.Parse(Console.ReadLine());
        Console.Write("Enter ISBN: ");
        string isbn = Console.ReadLine();

        Book book = new Book { UId = uid, Title = title, Author = author, PublishedDate = publishedDate, ISBN = isbn, IsIssued = false };
        bookService.AddBook(book);
    }

    static void RetrieveBookById()
    {
        Console.Write("Enter Book UId: ");
        string uid = Console.ReadLine();
        Book book = bookService.GetBookById(uid);
        if (book != null)
        {
            Console.WriteLine($"UId: {book.UId}, Title: {book.Title}, Author: {book.Author}, Published Date: {book.PublishedDate}, ISBN: {book.ISBN}, Is Issued: {book.IsIssued}");
        }
        else
        {
            Console.WriteLine("Book not found.");
        }
    }

    static void RetrieveBookByName()
    {
        Console.Write("Enter Book Name: ");
        string title = Console.ReadLine();
        Book book = bookService.GetBookByName(title);
        if (book != null)
        {
            Console.WriteLine($"UId: {book.UId}, Title: {book.Title}, Author: {book.Author}, Published Date: {book.PublishedDate}, ISBN: {book.ISBN}, Is Issued: {book.IsIssued}");
        }
        else
        {
            Console.WriteLine("Book not found.");
        }
    }

    static void RetrieveAllBooks()
    {
        var books = bookService.GetAllBooks();
        foreach (var book in books)
        {
            Console.WriteLine($"UId: {book.UId}, Title: {book.Title}, Author: {book.Author}, Published Date: {book.PublishedDate}, ISBN: {book.ISBN}, Is Issued: {book.IsIssued}");
        }
    }

    static void RetrieveAvailableBooks()
    {
        var books = bookService.GetAvailableBooks();
        foreach (var book in books)
        {
            Console.WriteLine($"UId: {book.UId}, Title: {book.Title}, Author: {book.Author}, Published Date: {book.PublishedDate}, ISBN: {book.ISBN}, Is Issued: {book.IsIssued}");
        }
    }

    static void RetrieveIssuedBooks()
    {
        var books = bookService.GetIssuedBooks();
        foreach (var book in books)
        {
            Console.WriteLine($"UId: {book.UId}, Title: {book.Title}, Author: {book.Author}, Published Date: {book.PublishedDate}, ISBN: {book.ISBN}, Is Issued: {book.IsIssued}");
        }
    }

    static void UpdateBook()
    {
        Console.Write("Enter Book UId to update: ");
        string uid = Console.ReadLine();
        Console.Write("Enter new Title: ");
        string title = Console.ReadLine();
        Console.Write("Enter new Author: ");
        string author = Console.ReadLine();
        Console.Write("Enter new Published Date (yyyy-mm-dd): ");
        DateTime publishedDate = DateTime.Parse(Console.ReadLine());
        Console.Write("Enter new ISBN: ");
        string isbn = Console.ReadLine();
        Console.Write("Is the book issued (true/false): ");
        bool isIssued = bool.Parse(Console.ReadLine());

        Book updatedBook = new Book { UId = uid, Title = title, Author = author, PublishedDate = publishedDate, ISBN = isbn, IsIssued = isIssued };
        bookService.UpdateBook(updatedBook);
    }

    static void AddMember()
    {
        Console.Write("Enter Member UId: ");
        string uid = Console.ReadLine();
        Console.Write("Enter Name: ");
        string name = Console.ReadLine();
        Console.Write("Enter Date of Birth (yyyy-mm-dd): ");
        DateTime dateOfBirth = DateTime.Parse(Console.ReadLine());
        Console.Write("Enter Email: ");
        string email = Console.ReadLine();

        Member member = new Member { UId = uid, Name = name, DateOfBirth = dateOfBirth, Email = email };
        memberService.AddMember(member);
    }

    static void RetrieveMemberById()
    {
        Console.Write("Enter Member UId: ");
        string uid = Console.ReadLine();
        Member member = memberService.GetMemberById(uid);
        if (member != null)
        {
            Console.WriteLine($"UId: {member.UId}, Name: {member.Name}, Date of Birth: {member.DateOfBirth}, Email: {member.Email}");
        }
        else
        {
            Console.WriteLine("Member not found.");
        }
    }

    static void GetAllMembers()
    {
        var members = memberService.GetAllMembers();
        foreach (var member in members)
        {
            Console.WriteLine($"UId: {member.UId}, Name: {member.Name}, Date of Birth: {member.DateOfBirth}, Email: {member.Email}");
        }
    }

    static void UpdateMember()
    {
        Console.Write("Enter Member UId to update: ");
        string uid = Console.ReadLine();
        Console.Write("Enter new Name: ");
        string name = Console.ReadLine();
        Console.Write("Enter new Date of Birth (yyyy-mm-dd): ");
        DateTime dateOfBirth = DateTime.Parse(Console.ReadLine());
        Console.Write("Enter new Email: ");
        string email = Console.ReadLine();

        Member updatedMember = new Member { UId = uid, Name = name, DateOfBirth = dateOfBirth, Email = email };
        memberService.UpdateMember(updatedMember);
    }

    static void IssueBook()
    {
        Console.Write("Enter Issue UId: ");
        string uid = Console.ReadLine();
        Console.Write("Enter Book UId: ");
        string bookId = Console.ReadLine();
        Console.Write("Enter Member UId: ");
        string memberId = Console.ReadLine();
        Console.Write("Enter Issue Date (yyyy-mm-dd): ");
        DateTime issueDate = DateTime.Parse(Console.ReadLine());

        Issue issue = new Issue { UId = uid, BookId = bookId, MemberId = memberId, IssueDate = issueDate, IsReturned = false };
        issueService.AddIssue(issue);

        // Update book status
        var book = bookService.GetBookById(bookId);
        if (book != null)
        {
            book.IsIssued = true;
            bookService.UpdateBook(book);
        }
    }

    static void GetIssueById()
    {
        Console.Write("Enter Issue UId: ");
        string uid = Console.ReadLine();
        Issue issue = issueService.GetIssueById(uid);
        if (issue != null)
        {
            Console.WriteLine($"UId: {issue.UId}, BookId: {issue.BookId}, MemberId: {issue.MemberId}, Issue Date: {issue.IssueDate}, Return Date: {issue.ReturnDate}, Is Returned: {issue.IsReturned}");
        }
        else
        {
            Console.WriteLine("Issue not found.");
        }
    }

    static void UpdateIssue()
    {
        Console.Write("Enter Issue UId to update: ");
        string uid = Console.ReadLine();
        Console.Write("Enter new Book UId: ");
        string bookId = Console.ReadLine();
        Console.Write("Enter new Member UId: ");
        string memberId = Console.ReadLine();
        Console.Write("Enter new Issue Date (yyyy-mm-dd): ");
        DateTime issueDate = DateTime.Parse(Console.ReadLine());
        Console.Write("Enter new Return Date (yyyy-mm-dd): ");
        DateTime? returnDate = DateTime.Parse(Console.ReadLine());
        Console.Write("Is the book returned (true/false): ");
        bool isReturned = bool.Parse(Console.ReadLine());

        Issue updatedIssue = new Issue { UId = uid, BookId = bookId, MemberId = memberId, IssueDate = issueDate, ReturnDate = returnDate, IsReturned = isReturned };
        issueService.UpdateIssue(updatedIssue);

        // Update book status
        var book = bookService.GetBookById(bookId);
        if (book != null)
        {
            book.IsIssued = !isReturned;
            bookService.UpdateBook(book);
        }
    }
}
